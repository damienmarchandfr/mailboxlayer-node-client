{"version":3,"file":"FileConnector.js","sourceRoot":"","sources":["../../storages/FileConnector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAuD;AAEvD,6BAA8B;AAE9B;IAAmC,iCAAiB;IAGhD,uBAAY,IAAY;QAAxB,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,IAAI,GAAG,IAAI,CAAA;;IACpB,CAAC;IAEY,oCAAY,GAAzB,UAA0B,KAAY;;;;;4BAClC,qBAAM,IAAI,CAAC,WAAW,EAAE;wBAExB,uBAAuB;sBAFC;;wBAAxB,SAAwB,CAAA;;;;wBAIpB,qBAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,EAAA;;wBAA9C,SAA8C,CAAA;;;;wBAE9C,cAAc;wBACd,qBAAM,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAA;;wBADxE,cAAc;wBACd,SAAwE,CAAA;;4BAG5E,sBAAO,KAAK,EAAA;;;;KACf;IAEY,oCAAY,GAAzB,UAA0B,KAAa;;;;;;;wBAE/B,qBAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,EAAA;;wBAAxC,SAAwC,CAAA;;;;wBAExC,sBAAO,IAAI,EAAA;4BAIC,qBAAM,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC,EAAA;;wBAApD,OAAO,GAAG,SAA0C;wBACpD,IAAI,GAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAU,CAAA;wBACrD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;wBAC7B,sBAAO,IAAI,EAAA;;;;KACd;IAEa,mCAAW,GAAzB;;;;;;;wBAEQ,qBAAM,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;wBAA1B,SAA0B,CAAA;;;;wBAE1B,qBAAM,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;wBAAzB,SAAyB,CAAA;;;;;;KAEhC;IACL,oBAAC;AAAD,CAAC,AA3CD,CAAmC,qCAAiB,GA2CnD;AA3CY,sCAAa","sourcesContent":["import { AbstractConnector } from './AbstractConnector'\nimport { Email } from '../models/data/Email'\nimport * as fs from 'fs-extra'\n\nexport class FileConnector extends AbstractConnector {\n    private path: string\n\n    constructor(path: string) {\n        super()\n        this.path = path\n    }\n\n    public async addEmailInfo(email: Email): Promise<Email> {\n        await this.creaeFolder()\n\n        // Check if file exists\n        try {\n            await fs.access(this.path + '/' + email.email)\n        } catch (error) {\n            // create file\n            await fs.writeFile(this.path + '/' + email.email, JSON.stringify(email))\n        }\n\n        return email\n    }\n\n    public async getEmailInfo(email: string): Promise<Email | null> {\n        try {\n            await fs.access(this.path + '/' + email)\n        } catch (error) {\n            return null\n        }\n\n        // Read file\n        const content = await fs.readFile(this.path + '/' + email)\n        const mail  = JSON.parse(content.toString()) as Email\n        mail.alreadyInDatabase = true\n        return mail\n    }\n\n    private async creaeFolder() {\n        try {\n            await fs.access(this.path)\n        } catch (error) {\n            await fs.mkdir(this.path)\n        }\n    }\n}\n"]}