{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oCAAqC;AAErC,yEAAuE;AACvE,6CAA4C;AAE5C;IAGI,sBAAY,MAAe;QACvB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACnC,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAA;SACpE;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACxB,CAAC;IAEY,sCAAe,GAA5B,UAA6B,KAAa;;;;;;wBAChC,OAAO,GAAG;4BACZ,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;4BAC/B,IAAI,EAAE,IAAI;yBACb,CAAA;6BAEG,CAAA,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA,EAA1C,wBAA0C;wBACtB,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;wBAA7D,WAAW,GAAG,SAA+C;wBACnE,IAAI,WAAW,KAAK,IAAI,EAAE;4BACtB,sBAAO,WAAW,EAAA;yBACrB;;4BAIe,qBAAM,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;wBAAnC,WAAW,GAAG,SAAqB;wBAEzC,IAAI,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;4BACvC,MAAM,IAAI,sCAAiB,CAAC,WAAgC,CAAC,CAAA;yBAChE;wBAEK,YAAY,GAAG,IAAI,aAAK,CAAC,KAAK,CAAC,CAAA;wBACrC,YAAY,CAAC,eAAe,CAAC,WAA2B,CAAC,CAAA;6BAGrD,CAAA,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA,EAA1C,wBAA0C;wBAC1C,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,EAAA;;wBAAtD,SAAsD,CAAA;;4BAG1D,sBAAO,YAAY,EAAA;;;;KACtB;IAEO,qCAAc,GAAtB,UAAuB,KAAa;QAChC,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAA;QAC5D,OAAO,QAAQ,GAAG,oCAAoC;YACrD,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,GAAG,KAAK,GAAG,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACtF,CAAC;IACL,mBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,oCAAY","sourcesContent":["import { IConfig } from './models/IConfig';\nimport * as rp from 'request-promise'\nimport { IApiResponse, IApiResponseError } from './models/IResponse';\nimport { MailBoxLayerError } from './models/errors/MailBoxLayer.error';\nimport { Email } from './models/data/Email';\n\nexport class MailBoxLayer {\n    private config: IConfig\n\n    constructor(config: IConfig) {\n        if (config.cache && !config.connector) {\n            throw new Error('If cache is true you muste provide a connector')\n        }\n        this.config = config\n    }\n\n    public async getInformations(email: string): Promise<Email> {\n        const options = {\n            uri: this.generateApiUrl(email),\n            json: true\n        }\n\n        if (this.config.cache && this.config.connector) {\n            const emailFromDb = await this.config.connector.getEmailInfo(email)\n            if (emailFromDb !== null) {\n                return emailFromDb\n            }\n        }\n\n        // If not in database or no storage given make an API request\n        const apiResponse = await rp.get(options)\n\n        if (apiResponse.hasOwnProperty('success')) {\n            throw new MailBoxLayerError(apiResponse as IApiResponseError)\n        }\n\n        const emailFromApi = new Email(email)\n        emailFromApi.fromAPIResponse(apiResponse as IApiResponse)\n\n        // Save in database\n        if (this.config.cache && this.config.connector) {\n            await this.config.connector.addEmailInfo(emailFromApi)\n        }\n\n        return emailFromApi\n    }\n\n    private generateApiUrl(email: string): string {\n        const protocol = this.config.secure ? 'https://' : 'http://'\n        return protocol + 'apilayer.net/api/check?access_key=' +\n         this.config.accessKey + '&email=' + email + '&smtp=' + (this.config.smtp ? 1 : 0)\n    }\n}\n"]}