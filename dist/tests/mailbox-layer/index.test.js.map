{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../tests/mailbox-layer/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai'\nimport 'mocha';\nimport * as rp from 'request-promise'\nimport * as sinon from 'sinon'\nimport { MailBoxLayer } from '../..';\nimport { Email } from '../../models/data/Email';\nimport { MemoryConnector } from '../../storages/MemoryConnector';\n\nconst apiResponse: any = {\n    email: 'support@apilayer.com',\n    did_you_mean: '',\n    user: 'support',\n    domain: 'apilayer.net',\n    format_valid: true,\n    mx_found: true,\n    smtp_check: true,\n    catch_all: false,\n    role: true,\n    disposable: false,\n    free: false,\n    score: 0.8\n}\n\nconst apiResponseError: any = {\n  success: false,\n  error: {\n    code: 210,\n    type: 'no_email_address_supplied',\n    info: 'Please specify an email address. [Example: support@apilayer.com]'\n  }\n}\n\nlet mailBoxLayer: MailBoxLayer\nlet mailBoxLayerWithCache: MailBoxLayer\nlet stub: sinon.SinonStub\n\nconst memoryConnector = new MemoryConnector()\n\ndescribe('Test MailBoxLayer class', () => {\n    before(() => {\n        stub = sinon.stub(rp, 'get').resolves(apiResponse)\n\n        mailBoxLayer = new MailBoxLayer({\n            accessKey : 'fdfjskl',\n            cache : false,\n            catchAll : false,\n            secure : false,\n            smtp : false\n        })\n\n        mailBoxLayerWithCache = new MailBoxLayer({\n            accessKey : 'fdfjskl',\n            cache : true,\n            catchAll : false,\n            secure : false,\n            smtp : false,\n            connector : memoryConnector\n        })\n    })\n\n    afterEach(() => {\n        memoryConnector.emails = []\n        stub.restore()\n        stub = sinon.stub(rp, 'get').resolves(apiResponse)\n    })\n\n    it('should return mail info like api response in camel case', async () => {\n\n        const info: Email = await mailBoxLayer.getInformations('damien@marchand.fr')\n        const emailInfo = {\n            email: 'support@apilayer.com',\n            didYouMean: '',\n            user: 'support',\n            domain: 'apilayer.net',\n            formatValid: true,\n            mxFound: true,\n            catchAll: false,\n            role: true,\n            disposable: false,\n            free: false,\n            score: 0.8,\n            smtpChecked : true,\n            alreadyInDatabase : false\n        }\n\n        expect(JSON.parse(JSON.stringify(info))).to.eql(emailInfo)\n    })\n\n    it('should return result for transaction check and marketing', async () => {\n        const info: Email = await mailBoxLayer.getInformations('damien@marchand.fr')\n\n        expect(info.canbeUsedForMarketing()).to.be.true\n        expect(info.canbeUsedForMarketing()).to.be.true\n\n        info.score = 0.3\n        expect(info.canbeUsedForMarketing()).to.be.false\n        expect(info.canbeUsedForMarketing()).to.be.false\n    })\n\n    it('should throw error if API error', async () => {\n        stub.restore()\n        sinon.stub(rp, 'get').resolves(apiResponseError)\n\n        let error: any = {}\n\n        try {\n            await mailBoxLayer.getInformations('damien@marchand.fr')\n        } catch (err) {\n            error = err\n        }\n\n        expect(error.code).to.eql(apiResponseError.error.code)\n    })\n\n    it('should return already in database === true if saved in database', async () => {\n        let info: Email = await mailBoxLayerWithCache.getInformations('support@apilayer.com')\n        expect(info.alreadyInDatabase).to.be.false\n\n        info = await mailBoxLayerWithCache.getInformations('support@apilayer.com')\n        expect(info.alreadyInDatabase).to.be.true\n    })\n});\n"]}