{"version":3,"file":"FileConnector.test.js","sourceRoot":"","sources":["../../../tests/storages/FileConnector.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai'\nimport 'mocha';\nimport { Email } from '../../models/data/Email';\nimport { FileConnector } from '../../storages/FileConnector';\nimport * as fs from 'fs-extra'\nimport * as rimraf from 'rimraf'\n\nconst emailToTest = 'damien@marchand.fr'\nlet fileConnector: FileConnector\n\nconst emailResponse: Email = {\n    email : emailToTest,\n    catchAll : true,\n    didYouMean : 'damien@damien.fr',\n    disposable : false,\n    domain : 'marchand.fr',\n    formatValid : true,\n    free : true,\n    mxFound : true,\n    role : true,\n    score : 1,\n    smtpChecked : true,\n    user : 'damien'\n} as Email\n\nlet counter = 0\n\ndescribe('Test File connector : ', () => {\n\n    before(async () => {\n        fileConnector = new FileConnector('./temp')\n    })\n\n    after(async () =>Â {\n        await new Promise((resolve) => {\n            rimraf('./temp', (err) => {\n                resolve()\n            })\n        })\n    })\n\n    beforeEach(async () => {\n       let  errorDelete = new Error()\n\n       // Delete folder\n       try {\n        await new Promise((resolve, reject) => {\n            rimraf('./temp', (err) => {\n                if (err) {\n                    reject(err)\n                }\n                resolve()\n            })\n        })\n       } catch (error) {\n            errorDelete = error\n       }\n\n       if (counter === 0) {\n           expect(errorDelete.message).not.to.be.undefined\n       } else {\n            expect(errorDelete.message).to.be.empty\n       }\n\n       let errorAccess: Error = new Error()\n       try {\n            await fs.access('./temp')\n        } catch (error) {\n            errorAccess = error\n        }\n\n       expect(errorAccess.message).not.to.be.undefined\n       counter++\n    })\n\n    it('should create the folder and file', async () => {\n        await fileConnector.addEmailInfo(emailResponse)\n\n        let errorNotExists = new Error()\n\n        try {\n            await fs.access('./temp/' + emailResponse.email)\n        } catch (error) {\n            errorNotExists = error\n        }\n\n        expect(errorNotExists.message).to.be.empty\n    })\n\n    it('should return null if email not saved in database', async () => {\n        const result = await fileConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n    })\n\n    it('should add an email if not exists in database', async () => {\n        let result = await fileConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await fileConnector.addEmailInfo(email)\n\n        // File exists\n        await fs.access('./temp/' + email.email)\n\n        result = await fileConnector.getEmailInfo(emailToTest)\n        for (const key of Object.keys(email)) {\n            expect((result as any)[key]).to.eql((email as any)[key])\n        }\n    })\n\n    it('should creae 2 files. One for each email', async () => {\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await fileConnector.addEmailInfo(email)\n        email.email = 'damien@github.fr'\n        await fileConnector.addEmailInfo(email)\n\n        const files: string[] = await fs.readdir('./temp')\n        expect(files.length).to.eql(2)\n    })\n});\n"]}