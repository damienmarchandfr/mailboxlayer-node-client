{"version":3,"file":"MemoryConnector.test.js","sourceRoot":"","sources":["../../../tests/storages/MemoryConnector.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from 'chai'\nimport 'mocha';\nimport { Email } from '../../models/data/Email';\nimport { MemoryConnector } from '../../storages/MemoryConnector';\n\nconst emailToTest = 'damien@marchand.fr'\nlet memoryConnector: MemoryConnector\n\ndescribe('Test Memory connector : ', () => {\n\n    before(async () => {\n        memoryConnector = new MemoryConnector()\n    })\n\n    beforeEach(async () => {\n        memoryConnector.emails = []\n    })\n\n    it('should return null if email not saved in database', async () => {\n        const result = await memoryConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n    })\n\n    it('should add an email if not exists in database', async () => {\n        let result = await memoryConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await memoryConnector.addEmailInfo(email)\n        result = await memoryConnector.getEmailInfo(emailToTest)\n        for (const key of Object.keys(email)) {\n            expect((result as any)[key]).to.eql((email as any)[key])\n        }\n    })\n\n    it('should not save duplicate emails in database', async () => {\n        const result = await memoryConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await memoryConnector.addEmailInfo(email)\n        await memoryConnector.addEmailInfo(email)\n        const count = memoryConnector.emails.length\n        expect(count).to.eql(1)\n    })\n});\n"]}