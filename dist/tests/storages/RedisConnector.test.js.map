{"version":3,"file":"RedisConnector.test.js","sourceRoot":"","sources":["../../../tests/storages/RedisConnector.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAyDA;;AAzDA,6BAA6B;AAC7B,iBAAe;AACf,gEAA4D;AAC5D,6BAA8B;AAC9B,mCAAoC;AAGpC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;AAClD,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;AAE5C,IAAM,WAAW,GAAG,oBAAoB,CAAA;AACxC,IAAI,cAA8B,CAAA;AAElC,IAAM,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC;IACnC,IAAI,EAAG,OAAO;IACd,EAAE,EAAG,GAAG;CACX,CAAC,CAAA;AAEF,QAAQ,CAAC,yBAAyB,EAAE;IAEhC,MAAM,CAAC;;YACH,cAAc,GAAG,IAAI,+BAAc,CAAC,WAAW,CAAC,CAAA;;;SACnD,CAAC,CAAA;IAEF,UAAU,CAAC;;;wBACP,qBAAO,WAAmB,CAAC,YAAY,EAAE,EAAA;;oBAAzC,SAAyC,CAAA;;;;SAC5C,CAAC,CAAA;IAEF,EAAE,CAAC,mDAAmD,EAAE;;;;wBACrC,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C;oBAC7D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;;;;SAC5B,CAAC,CAAA;IAEF,EAAE,CAAC,+CAA+C,EAAE;;;;wBACnC,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C;oBAC3D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;oBACnB,KAAK,GAAG;wBACV,KAAK,EAAG,WAAW;wBACnB,QAAQ,EAAG,IAAI;wBACf,UAAU,EAAG,kBAAkB;wBAC/B,UAAU,EAAG,KAAK;wBAClB,MAAM,EAAG,aAAa;wBACtB,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,IAAI;wBACX,OAAO,EAAG,IAAI;wBACd,IAAI,EAAG,IAAI;wBACX,KAAK,EAAG,CAAC;wBACT,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,QAAQ;qBACT,CAAA;oBACV,qBAAM,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;oBAAxC,SAAwC,CAAA;oBAC/B,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C,CAAA;oBACvD,WAAoC,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;wBAA3B,GAAG;wBACV,aAAM,CAAE,MAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAE,KAAa,CAAC,GAAG,CAAC,CAAC,CAAA;qBAC3D;;;;SACJ,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from 'chai'\nimport 'mocha';\nimport {RedisConnector} from '../../storages/RedisConnector'\nimport * as redis from 'redis'\nimport * as bluebird from 'bluebird'\nimport { Email } from '../../models/data/Email'\n\nbluebird.promisifyAll(redis.RedisClient.prototype)\nbluebird.promisifyAll(redis.Multi.prototype)\n\nconst emailToTest = 'damien@marchand.fr'\nlet redisConnector: RedisConnector\n\nconst redisClient = redis.createClient({\n    host : 'redis',\n    db : '6'\n})\n\ndescribe('Test Redis connector : ', () => {\n\n    before(async () => {\n        redisConnector = new RedisConnector(redisClient)\n    })\n\n    beforeEach(async () => {\n        await (redisClient as any).flushdbAsync()\n    })\n\n    it('should return null if email not saved un database', async () => {\n        const result = await redisConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n    })\n\n    it('should add an email if not exists in database', async () => {\n        let result = await redisConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await redisConnector.addEmailInfo(email)\n        result = await redisConnector.getEmailInfo(emailToTest)\n        for (const key of Object.keys(email)) {\n            expect((result as any)[key]).to.eql((email as any)[key])\n        }\n    })\n});\n"]}