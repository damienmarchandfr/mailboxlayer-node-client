{"version":3,"file":"MongoConnector.test.js","sourceRoot":"","sources":["../../../tests/storages/MongoConnector.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBA4EA;;AA5EA,6BAA6B;AAC7B,iBAAe;AACf,gEAA+D;AAC/D,mCAAsD;AACtD,oCAAqC;AAGrC,IAAM,WAAW,GAAG,oBAAoB,CAAA;AACxC,IAAI,cAA8B,CAAA;AAClC,IAAI,eAA2B,CAAA;AAE/B,QAAQ,CAAC,yBAAyB,EAAE;IAEhC,MAAM,CAAC;;;;wBACiB,qBAAM,qBAAW,CAAC,OAAO,CAAC,oBAAW,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,EAAA;;oBAAzF,WAAW,GAAG,SAA2E;oBACzF,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC,oBAAW,CAAC,YAAY,CAAC,CAAA;oBACnD,eAAe,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;oBACxC,cAAc,GAAG,IAAI,+BAAc,CAAC,eAAe,CAAC,CAAA;;;;SACvD,CAAC,CAAA;IAEF,UAAU,CAAC;;;wBACP,qBAAM,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,EAAA;;oBAApC,SAAoC,CAAA;;;;SACvC,CAAC,CAAA;IAEF,EAAE,CAAC,mDAAmD,EAAE;;;;wBACrC,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C;oBAC7D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;;;;SAC5B,CAAC,CAAA;IAEF,EAAE,CAAC,+CAA+C,EAAE;;;;wBACnC,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C;oBAC3D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;oBACnB,KAAK,GAAG;wBACV,KAAK,EAAG,WAAW;wBACnB,QAAQ,EAAG,IAAI;wBACf,UAAU,EAAG,kBAAkB;wBAC/B,UAAU,EAAG,KAAK;wBAClB,MAAM,EAAG,aAAa;wBACtB,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,IAAI;wBACX,OAAO,EAAG,IAAI;wBACd,IAAI,EAAG,IAAI;wBACX,KAAK,EAAG,CAAC;wBACT,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,QAAQ;qBACT,CAAA;oBACV,qBAAM,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;oBAAxC,SAAwC,CAAA;oBAC/B,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C,CAAA;oBACvD,WAAoC,EAAlB,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,cAAkB,EAAlB,IAAkB,EAAE;wBAA3B,GAAG;wBACV,aAAM,CAAE,MAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAE,KAAa,CAAC,GAAG,CAAC,CAAC,CAAA;qBAC3D;;;;SACJ,CAAC,CAAA;IAEF,EAAE,CAAC,8CAA8C,EAAE;;;;wBAChC,qBAAM,cAAc,CAAC,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAAvD,MAAM,GAAG,SAA8C;oBAC7D,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;oBACnB,KAAK,GAAG;wBACV,KAAK,EAAG,WAAW;wBACnB,QAAQ,EAAG,IAAI;wBACf,UAAU,EAAG,kBAAkB;wBAC/B,UAAU,EAAG,KAAK;wBAClB,MAAM,EAAG,aAAa;wBACtB,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,IAAI;wBACX,OAAO,EAAG,IAAI;wBACd,IAAI,EAAG,IAAI;wBACX,KAAK,EAAG,CAAC;wBACT,WAAW,EAAG,IAAI;wBAClB,IAAI,EAAG,QAAQ;qBACT,CAAA;oBACV,qBAAM,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;oBAAxC,SAAwC,CAAA;oBACxC,qBAAM,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,EAAA;;oBAAxC,SAAwC,CAAA;oBAC1B,qBAAM,eAAe,CAAC,cAAc,CAAC,EAAC,KAAK,EAAG,WAAW,EAAC,CAAC,EAAA;;oBAAnE,KAAK,GAAG,SAA2D;oBACzE,aAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;;;;SAC1B,CAAC,CAAA;AACN,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from 'chai'\nimport 'mocha';\nimport { MongoConnector } from '../../storages/MongoConnector';\nimport { MongoClient, Db, Collection } from 'mongodb';\nimport {mongoConfig} from '../config'\nimport { Email } from '../../models/data/Email';\n\nconst emailToTest = 'damien@marchand.fr'\nlet mongoConnector: MongoConnector\nlet mongoCollection: Collection\n\ndescribe('Test Mongo connector : ', () => {\n\n    before(async () => {\n        const mongoClient = await MongoClient.connect(mongoConfig.serverUrl, { useNewUrlParser: true })\n        const db = mongoClient.db(mongoConfig.databaseName)\n        mongoCollection = db.collection('email')\n        mongoConnector = new MongoConnector(mongoCollection)\n    })\n\n    beforeEach(async () => {\n        await mongoCollection.deleteMany({})\n    })\n\n    it('should return null if email not saved un database', async () => {\n        const result = await mongoConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n    })\n\n    it('should add an email if not exists in database', async () => {\n        let result = await mongoConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await mongoConnector.addEmailInfo(email)\n        result = await mongoConnector.getEmailInfo(emailToTest)\n        for (const key of Object.keys(email)) {\n            expect((result as any)[key]).to.eql((email as any)[key])\n        }\n    })\n\n    it('should not save duplicate emails in database', async () => {\n        const result = await mongoConnector.getEmailInfo(emailToTest)\n        expect(result).to.be.null\n        const email = {\n            email : emailToTest,\n            catchAll : true,\n            didYouMean : 'damien@damien.fr',\n            disposable : false,\n            domain : 'marchand.fr',\n            formatValid : true,\n            free : true,\n            mxFound : true,\n            role : true,\n            score : 1,\n            smtpChecked : true,\n            user : 'damien'\n        } as Email\n        await mongoConnector.addEmailInfo(email)\n        await mongoConnector.addEmailInfo(email)\n        const count = await mongoCollection.countDocuments({email : emailToTest})\n        expect(count).to.eql(1)\n    })\n});\n"]}