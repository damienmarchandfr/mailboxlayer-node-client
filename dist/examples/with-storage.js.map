{"version":3,"file":"with-storage.js","sourceRoot":"","sources":["../../examples/with-storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {MailBoxLayer} from '..'\nimport * as redis from 'redis'\n\nimport * as bluebird from 'bluebird'\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n\nimport { RedisConnector } from '../storages/RedisConnector';\nimport { MongoClient } from 'mongodb';\nimport { MongoConnector } from '../storages/MongoConnector';\nimport { MemoryConnector } from '../storages/MemoryConnector';\nimport { FileConnector } from '../storages/FileConnector';\n\nconst redisClient = redis.createClient({\n    db : '6'\n})\nconst redisConnector = new RedisConnector(redisClient)\n\nconst memoryConnector = new MemoryConnector()\n\nconst fileConnector = new FileConnector('your-directory-path')\n\n// ----------------- MONGO -------------------\n\nnew Promise((resolve) => {resolve()})\n.then(async () => {\n    const mongoClient = await MongoClient.connect('mongo_server_url', { useNewUrlParser: true })\n    const db = mongoClient.db('mongo_database_name')\n    const mongoCollection = db.collection('email')\n    const mongoConnector = new MongoConnector(mongoCollection)\n    try {\n        const mailBoxLayer = new MailBoxLayer({\n            accessKey : 'your_access_key',\n            smtp : true,\n            catchAll : true,\n            secure : false,\n            cache : true,\n            connector : mongoConnector\n        })\n        const email = await mailBoxLayer.getInformations('zynefaty@duck2.club')\n        console.log(email)\n    } catch (error) {\n        console.error(error)\n    }\n})\n\n// ------------------ REDIS ------------------\n\nnew Promise((resolve) => {resolve()})\n.then(async () => {\n    try {\n        const mailBoxLayer = new MailBoxLayer({\n            accessKey : 'your_access_key',\n            smtp : true,\n            catchAll : true,\n            secure : false,\n            cache : true,\n            connector: redisConnector\n        })\n        const email = await mailBoxLayer.getInformations('zynefaty@duck2.club')\n        console.log(email)\n    } catch (error) {\n        console.error(error)\n    }\n})\n\n// --------------- MEMORY -------------------\n// Do not use memory for production\nnew Promise((resolve) => {resolve()})\n.then(async () => {\n    try {\n        const mailBoxLayer = new MailBoxLayer({\n            accessKey : 'your_access_key',\n            smtp : true,\n            catchAll : true,\n            secure : false,\n            cache : true, connector: memoryConnector\n        })\n        const email = await mailBoxLayer.getInformations('zynefaty@duck2.club')\n        console.log(email)\n    } catch (error) {\n        console.error(error)\n    }\n})\n\n// -------- FILES -------------\n// Do not use memory for production\nnew Promise((resolve) => {\n    resolve()\n})\n.then(async () => {\n    try {\n        const mailBoxLayer = new MailBoxLayer({\n            accessKey : 'your_access_key',\n            smtp : true,\n            catchAll : true,\n            secure : false,\n            cache : true,\n            connector: fileConnector\n        })\n        const email = await mailBoxLayer.getInformations('zynefaty@duck2.club')\n        console.log(email)\n    } catch (error) {\n        console.error(error)\n    }\n})\n"]}